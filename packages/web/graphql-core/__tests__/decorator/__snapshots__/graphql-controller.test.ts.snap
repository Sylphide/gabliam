// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController() 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [],
    "schema": Array [],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController({graphqlFiles, schema}) 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/decorator/photo/photo.gql",
    ],
    "schema": Array [
      "
type Hero {
  id: Int!

  name: String!

  power: String!

  amountPeopleSaved: Int!
}

input HeroInput {
  name: String!

  power: String!

  amountPeopleSaved: Int!
}

type HeroPage {
  items: [Hero]
  totalCount: Int
}

type Query {
  heroes: [Hero]
  getPageOfHeroes(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String): HeroPage
}

type Mutation {
  submitHero(heroInput: HeroInput!): Hero
}
",
    ],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController({graphqlFiles: absolute}) 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/decorator/photo/hero.gql",
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/decorator/photo/photo.gql",
    ],
    "schema": Array [],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController({graphqlFiles: relative, pwd}) 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/photo/hero.gql",
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/photo/photo.gql",
    ],
    "schema": Array [],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController({graphqlFiles: relative}) 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/decorator/photo/hero.gql",
      "<PROJECT_ROOT>/packages/web/graphql-core/__tests__/decorator/photo/photo.gql",
    ],
    "schema": Array [],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;

exports[`should add GraphqlController metadata to a class when decorated with @GraphqlController({schema}) 1`] = `
Array [
  DecoratorFactory {
    "graphqlFiles": Array [],
    "schema": Array [
      "
type Photo {
  id: Int!

  name: String!

  description: String!

  fileName: String!

  views: Int!

  isPublished: Boolean!
}

input PhotoInput {
  name: String!

  description: String!

  fileName: String!

  views: Int!

  isPublished: Boolean!
}

type PhotoPage {
  items: [Photo]
  totalCount: Int
}

type Query {
  photos: [Photo]
  getPageOfPhotos(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String): PhotoPage
}

type Mutation {
  submitPhoto(photoInput: PhotoInput!): Photo
}
",
      "
type Hero {
  id: Int!

  name: String!

  power: String!

  amountPeopleSaved: Int!
}

input HeroInput {
  name: String!

  power: String!

  amountPeopleSaved: Int!
}

type HeroPage {
  items: [Hero]
  totalCount: Int
}

type Query {
  heroes: [Hero]
  getPageOfHeroes(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String): HeroPage
}

type Mutation {
  submitHero(heroInput: HeroInput!): Hero
}
",
    ],
  },
  DecoratorFactory {
    "id": [Function],
    "type": "GraphqlController",
  },
]
`;
